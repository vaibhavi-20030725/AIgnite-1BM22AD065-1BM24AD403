# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w57Vjl_tSi3rIx7-gcv6ryzBjHFhun8a
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv("/content/COVID-19-Hospitals-Treatment-Plan.csv")
print(df.columns)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# Load dataset
df = pd.read_csv("/content/COVID-19-Hospitals-Treatment-Plan.csv")

# Encode categorical features
label_encoders = {}
for col in ['Hospital', 'Hospital_type', 'Hospital_city', 'Hospital_region',
            'Department', 'Ward_Type', 'Ward_Facility',
            'Type_of_Admission', 'Illness_Severity', 'Age']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Features & target
X = df.drop(columns=['case_id','patientid','Stay_Days'])
y = df['Stay_Days']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
clf = RandomForestClassifier(n_estimators=50, random_state=42)  # faster
clf.fit(X_train, y_train)

# Predict on full dataset
df['Predicted_Stay'] = clf.predict(X)

# Cost per day assumptions (simple example)
cost_per_day = {
    'General': 2000,
    'Surgery': 5000,
    'TB & Chest': 3000,
}
severity_multiplier = {
    'Minor': 1.0,
    'Moderate': 1.5,
    'Severe': 2.0,
}

# Decode columns back to original labels
for col, le in label_encoders.items():
    df[col] = le.inverse_transform(df[col])

# Cost calculation
def estimate_cost(row):
    dept = row['Department']
    sev = row['Illness_Severity']
    daily_rate = cost_per_day.get(dept, 2500)  # default
    multiplier = severity_multiplier.get(sev, 1.0)
    stay_days = int(row['Predicted_Stay'].split('-')[0]) if '-' in row['Predicted_Stay'] else 10
    return daily_rate * multiplier * stay_days

df['Estimated_Cost'] = df.apply(estimate_cost, axis=1)

# Save results for later use
df.to_csv("predictions.csv", index=False)
print("‚úÖ Training done. Predictions saved ")

import pandas as pd

# Load predictions CSV
df = pd.read_csv("COVID-19-Hospitals-Treatment-Plan.csv")  # replace with your CSV path

# Make sure patientid is numeric
df['patientid'] = df['patientid'].astype(int)

# --- ROLE VALIDATION ---
valid_roles = ["doctor", "nurse", "admin", "patient"]
role = input("Enter your role (Doctor / Nurse / Admin / Patient): ").strip().lower()
if role not in valid_roles:
    print("‚ùå Invalid role entered! Access denied.")
    exit()

# --- PATIENT ID VALIDATION ---
try:
    patient_id = int(input("Enter Patient ID: "))
except ValueError:
    print("‚ùå Invalid ID entered. Please enter a numeric Patient ID.")
    exit()

if patient_id not in df['patientid'].values:
    print(f"‚ùå Patient ID {patient_id} not found in records!")
    print(f"‚ÑπÔ∏è Valid patient IDs are: {df['patientid'].unique().tolist()}")
    exit()

# --- FETCH PATIENT RECORD ---
p = df[df['patientid'] == patient_id].iloc[0]

# --- ADJUSTED COST (10% extra) ---
base_cost = float(p['Admission_Deposit'])
adjusted_cost = round(base_cost * 1.10, 2)  # add 10% service charge

# --- ROLE BASED VIEWS ---
if role == "doctor":
    print(f"""
üë®‚Äç‚öïÔ∏è Doctor View:
Patient ID: {p['patientid']}
Department: {p['Department']}
Illness: {p['Illness_Severity']}
Type of Admission: {p['Type_of_Admission']}
Predicted Stay: {p['Stay_Days']}
    """)

elif role == "nurse":
    print(f"""
üë©‚Äç‚öïÔ∏è Nurse View:
Patient ID: {p['patientid']}
Ward Type: {p['Ward_Type']}
Facilities: {p['Ward_Facility']}
Visitors Allowed: {p['Patient_Visitors']}
Illness: {p['Illness_Severity']}
    """)

elif role == "admin":
    print(f"""
üíº Admin View:
Patient ID: {p['patientid']}
Hospital: {p['Hospital']}
Available Extra Rooms: {p['Available_Extra_Rooms_in_Hospital']}
Estimated Cost: ‚Çπ{adjusted_cost}
Illness: {p['Illness_Severity']}
    """)

elif role == "patient":
    # Parse stay days (e.g., "31-40" ‚Üí 35.5 days average)
    stay_str = str(p['Stay_Days'])
    if "-" in stay_str:
        low, high = map(int, stay_str.split("-"))
        est_days = (low + high) / 2
    else:
        est_days = int(stay_str) if stay_str.isdigit() else 1  # fallback

    # Calculate per-day cost
    per_day_cost = round(adjusted_cost / est_days, 2)

    print(f"""
üßë Patient View:
Dear Patient {p['patientid']},

- Type of Admission: {p['Type_of_Admission']}
- Illness: {p['Illness_Severity']}
- Estimated Stay: {p['Stay_Days']} (‚âà {est_days} days average)
- Total Expected Cost (incl. 10% service): ‚Çπ{adjusted_cost}

üí∞ Cost Breakdown:
  ‚Ä¢ Average Stay: {est_days} days
  ‚Ä¢ Per Day Cost: ‚Çπ{per_day_cost}
  ‚Ä¢ Calculation: {adjusted_cost} √∑ {est_days} = ‚Çπ{per_day_cost}
    """)

import matplotlib.pyplot as plt

# ------------------------------
# Ensure Predicted_Stay exists
# ------------------------------
if 'Predicted_Stay' not in df.columns:
    feature_cols = [col for col in df.columns if col not in ['case_id','patientid','Stay_Days',
                                                            'Predicted_Stay','Actual_Stay_Num',
                                                            'Predicted_Stay_Num','Estimated_Cost']]
    df['Predicted_Stay'] = clf.predict(df[feature_cols])

# ------------------------------
# Convert Stay_Days and Predicted_Stay to numeric
# ------------------------------
def stay_to_numeric(stay_str):
    if stay_str == "More than 100 Days":
        return 105
    parts = stay_str.split('-')
    return (int(parts[0]) + int(parts[1])) / 2

df['Actual_Stay_Num'] = df['Stay_Days'].apply(stay_to_numeric)
df['Predicted_Stay_Num'] = df['Predicted_Stay'].apply(stay_to_numeric)

# ------------------------------
# Over/Under Prediction Analysis
# ------------------------------
# By Age (original column)
age_groups = df.groupby('Age')[['Actual_Stay_Num','Predicted_Stay_Num']].mean()
age_groups.plot(kind='bar', figsize=(10,6))
plt.title("Actual vs Predicted Stay by Age Group")
plt.ylabel("Average Length of Stay (days)")
plt.xlabel("Age")
plt.grid(axis='y')
plt.show()

# By Illness Severity (original column)
severity_groups = df.groupby('Illness_Severity')[['Actual_Stay_Num','Predicted_Stay_Num']].mean()
severity_groups.plot(kind='bar', figsize=(8,5), color=['skyblue','salmon'])
plt.title("Actual vs Predicted Stay by Illness Severity")
plt.ylabel("Average Length of Stay (days)")
plt.xlabel("Illness Severity")
plt.grid(axis='y')
plt.show()